{"version":3,"sources":["components/auth/Registration.js","components/Home.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Registration","props","state","email","name","password","registrationErrors","handleSubmit","bind","handleChange","event","this","setState","target","value","axios","post","user","then","response","console","log","status","handleSuccessfulAuth","data","catch","error","preventDefault","onSubmit","type","placeholder","onChange","required","Component","Home","handleLogin","history","push","loggedInStatus","Dashboard","App","classname","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d267fb60.chunk.js","sourcesContent":["import React, { Component, header } from 'react';\nimport axios from 'axios';\n\nexport default class Registration extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      name: \"\",\n      password: \"\",\n      registrationErrors: \"\"\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event) {\n    \n    axios.post(\"http://localhost:5000/signup\", {\n      user: {\n        email: this.state.email,\n        name: this.state.name,\n        password: this.state.password\n      }\n    },\n    // MAKE SURE THIS NEXT LINE DOESN'T BREAK THINGS\n    // { withCredentials: true }\n    ).then(response => {\n      console.log('registration res', response);\n      if (response.status === 200){\n        console.log('blah')\n        this.props.handleSuccessfulAuth(response.data);}\n    }).catch(error => {\n      console.log(\"registration error\", error);\n    })\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={this.state.email}\n          onChange={this.handleChange} required />\n          <input\n          type=\"name\"\n          name=\"name\"\n          placeholder=\"Name\"\n          value={this.state.name}\n          onChange={this.handleChange} required />\n          <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          value={this.state.password}\n          onChange={this.handleChange} required />\n\n          <button type=\"submit\">Register</button>\n        </form>\n      </div>);\n  }\n}","import React, { Component } from \"react\";\nimport Registration from \"./auth/Registration\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSuccessfulAuth = this.handleSuccessfulAuth.bind(this);\n  }\n\n  handleSuccessfulAuth(data) {\n    this.props.handleLogin(data);\n    this.props.history.push(\"/dashboard\")\n    console.log(\"hi\")\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Home</h1>\n        <h2>status: {this.props.loggedInStatus}</h2>\n        <Registration handleSuccessfulAuth={this.handleSuccessfulAuth} />\n      </div>\n    )\n  }\n}","import React from 'react';\n\nconst Dashboard = props => {\n  return (\n    <div>\n      <div>\n      <h1>Dashboard</h1>\n      <h1>Status: {props.loggedInStatus}</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","import React, {useEffect, useState, Component } from 'react';\nimport { BrowserRouter, Route, Link, withRouter, Switch } from 'react-router-dom'\nimport './App.css';\nimport { Users } from \"./components/Users\";\nimport { Shops } from \"./components/Shops\";\nimport { Container } from \"semantic-ui-react\"\nimport Home from \"./components/Home\"\nimport Dashboard from \"./components/Dashboard\"\n// import Dashboard from \"./Dashboard\"\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loggedInStatus: \"NOT_LOGGED_IN\",\n      user: {}\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  handleLogin(data) {\n    this.setState({\n      loggedInStatus: \"LOGGED_IN\",\n      user: data\n    })\n  }\n\n\n  render() {\n    return (\n        <div classname=\"App\">\n        <BrowserRouter>\n        <Switch>\n            <Route exact path= {\"/\"} render={props => (\n              <Home {...props} handleLogin={this.handleLogin} loggedInStatus={this.state.loggedInStatus} />\n            )} />\n            <Route exact path={\"/dashboard\"} render={props => (\n              <Dashboard {...props} loggedInStatus={this.state.loggedInStatus}/>\n            )} />\n            </Switch>\n            </BrowserRouter>\n        </div>\n    )\n  }\n}\n\n// function App() {\n//   const [users, setUsers] = useState([]);\n//   const [shops, setShops] = useState([]);\n\n//   // /GET /users for list of users\n//   useEffect(() => {\n//     fetch('/users').then(response =>\n//       response.json().then(data => {\n//       setUsers(data.users);\n//     })\n//     );\n//   }, []);\n//   console.log(users);\n\n//   return (\n//     <Container style={{ marginTop: 40}}>\n//       <LoginForm onNewUser={user => setUsers(currentUsers => [...currentUsers, user])} />\n//       <Users users={users} />\n//     </Container>\n//   )\n\n//     // /GET /shops for list of shops\n//     useEffect(() => {\n//       fetch('/shops').then(response =>\n//         response.json().then(data => {\n//         setShops(data.shops);\n//       })\n//       );\n//     }, []);\n//     console.log(shops);\n\n//   return (\n  \n//     <div className=\"App\">\n//       <div className=\"App-header\">\n//         DONDE COFFEE!\n//       </div>\n//       <Users users={users} />\n//       <Shops shops={shops} />\n//     </div>\n//   );\n// }\n\n\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}